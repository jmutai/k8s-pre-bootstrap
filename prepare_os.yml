- hosts: "{{ target }}"
  become: yes
  become_method: sudo
  gather_facts: no
  vars:
    calicotext: |
      [keyfile]
      unmanaged-devices=interface-name:cali*;interface-name:tunl*;interface-name:vxlan.calico;interface-name:wireguard.cali
  tasks:
    - name: Put SELinux in disabled mode
      selinux:
        state: disabled

    - name: Install common packages
      package:
        name: [vim,nano,mc,bash-completion,wget,curl,yum-utils,lvm2,device-mapper-persistent-data,tcpdump]
        state: present
      ignore_errors: True

    - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
      shell: |
        swapoff -a

    - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+.*)$'
        replace: '# \1'

    - name: modprobe br_netfilter
      command: modprobe br_netfilter

    - name: Add br_netfilter config
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: 'br_netfilter'
        state: present
        create: yes

    - name: Modify sysctl entries (/etc/sysctl.conf)
      sysctl:
        name: '{{ item.key }}'
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
      ignore_errors: True
      with_items:
        - {key: net.bridge.bridge-nf-call-ip6tables, value: 1}
        - {key: net.bridge.bridge-nf-call-iptables,  value: 1}
#        - {key: net.ipv4.ip_forward,  value: 1}

    - name: Configure NetworkManager before attempting to use Calico networking
      copy:
        dest: /etc/NetworkManager/conf.d/calico.conf
        content: "{{ calicotext }}"

# - name: Update system
  # package:
    # name: "*"
    # state: latest

    - name: check packages for updates
      shell: yum list updates | awk 'f;/Updated Packages/{f=1;}' | awk '{ print $1 }'
      changed_when: updates.stdout_lines | length > 0
      args:
        warn: false
      register: updates

    - name: display count
      debug:
        msg: "Found {{ updates.stdout_lines | length }} packages to be updated:\n\n{{ updates.stdout }}"

# Update OS if it need
    - when: updates.stdout_lines | length > 0
      block:
        - name: install updates using yum
          yum:
            name: "*"
            state: latest
        - name: check if reboot is required
          shell: needs-restarting -r
          failed_when: false
          register: reboot_required
          changed_when: false

# Reboot anyway
    # - when: updates.stdout_lines | length > 0 and reboot_required.rc != 0
      # block:
    - name: reboot the server if required
      shell: sleep 3; reboot
      ignore_errors: true
      changed_when: false
      async: 1
      poll: 0
    - name: wait for server to come back after reboot
      wait_for_connection:
        timeout: 600
        delay: 20
      register: reboot_result
    - name: reboot time
      debug:
        msg: "The system rebooted in {{ reboot_result.elapsed }} seconds."
